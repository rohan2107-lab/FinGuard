import React, { useState, useEffect, useRef } from 'react';
import {
  StyleSheet,
  Text,
  View,
  Pressable,
  Image,
  TextInput,
  ScrollView,
  Dimensions,
  FlatList,
  ActivityIndicator,
  Animated,
  Easing,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { SafeAreaView } from 'react-native-safe-area-context';
import BottomNavigation from '../../components/BottomNavigation';
import { Color, FontFamily, FontSize } from '../../constants/GlobleStyle';
import { useNavigation } from '@react-navigation/native';
import TipModal from '../../components/TipModal';
import ChatbotBubble from '../../components/ChatbotBubble';
import CardSwitcher from '../../components/CardSwitcher';
import { useLanguage } from '../../contexts/LanguageContext';
import translations from '../../utils/translations';
import { appAxios } from '../../api/apiconfig';


const { width } = Dimensions.get('window');

const Home = () => {
  const [activeTab, setActiveTab] = useState('home');
  const [userdata,setUserdata] = useState([]);  
  const [showAllFeatures, setShowAllFeatures] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const navigation = useNavigation();
  const [showTipModal, setShowTipModal] = useState(false);
  const [fullName, setFullname] = useState('');
  const [loading, setLoading] = useState(true);
  
  // Get language context
  const { currentLanguage } = useLanguage();
  
  // Get translations for current language
  const homeTranslations = translations.home[currentLanguage] || translations.home.english;
  const commonTranslations = translations.common[currentLanguage] || translations.common.english;

  const handleTabPress = (tabId) => {
    setActiveTab(tabId);
  };

  const blinkingAnim = useRef(new Animated.Value(0)).current;
  const expandAnim = useRef(new Animated.Value(0)).current;

  const getTimeGreeting = () => {
    const hour = new Date().getHours();
    if (currentLanguage === 'hindi') {
      if (hour < 12) return ('‡§∂‡•Å‡§≠ ‡§™‡•ç‡§∞‡§≠‡§æ‡§§ üåÑ');
      if (hour < 17) return ('‡§∂‡•Å‡§≠ ‡§¶‡•ã‡§™‡§π‡§∞ ‚òÄÔ∏è');
      return ('‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ üåô');
    } else if (currentLanguage === 'punjabi') {
      if (hour < 12) return ('‡®∏‡®º‡©Å‡®≠ ‡®∏‡®µ‡©á‡®∞ üåÑ');
      if (hour < 17) return ('‡®∏‡®º‡©Å‡®≠ ‡®¶‡©Å‡®™‡®π‡®ø‡®∞ ‚òÄÔ∏è');
      return ('‡®∏‡®º‡©Å‡®≠ ‡®∏‡®º‡®æ‡®Æ üåô');
    } else {
      if (hour < 12) return ('Good Morning üåÑ');
      if (hour < 17) return ('Good Afternoon ‚òÄÔ∏è');
      return ('Good Evening üåô');
    }
  };


  useEffect(() => {
    const fetchUser = async () => {
      try {
        

        const res = await appAxios.get('api/auth/me')
        const data = res.data;
        setUserdata(data)

        if (res.ok) {
          setFullname(data.fullName);
        } else {
          console.log(data.message);
        }
      } catch (error) {
        console.error(error);
      }
      setLoading(false);
    };

    fetchUser();
  }, []);

  useEffect(() => {
    Animated.loop(
      Animated.sequence([
        Animated.timing(blinkingAnim, {
          toValue: 1,
          duration: 600,
          useNativeDriver: true,
          easing: Easing.linear,
        }),
        Animated.timing(blinkingAnim, {
          toValue: 0,
          duration: 600,
          useNativeDriver: true,
          easing: Easing.linear,
        }),
      ])
    ).start();
  }, []);

  useEffect(() => {
    Animated.timing(expandAnim, {
      toValue: showAllFeatures ? 1 : 0,
      duration: 300,
      useNativeDriver: false,
      easing: Easing.bezier(0.4, 0.0, 0.2, 1),
    }).start();
  }, [showAllFeatures]);

  if (loading) {
    return <ActivityIndicator size="large" color="#000" style={{ flex: 1, justifyContent: 'center' }} />;
  }

  // Enhanced features list with comprehensive search terms
  const allFeatures = [
    {
      id: 1,
      title: currentLanguage === 'hindi' ? '‡§¨‡§ú‡§ü‡§ø‡§Ç‡§ó' : 
             currentLanguage === 'punjabi' ? '‡®¨‡®ú‡®ü‡®ø‡©∞‡®ó' : 'Budgeting',
      searchTerms: ['budget', 'budgeting', 'expense', 'money management', 'spending', 'track expenses', 'financial planning', 'manage money', 'cost control'],
      icon: 'üí∞',
      color: '#4A90E2',
      gradient: ['#4A90E2', '#357ABD'],
      description: currentLanguage === 'hindi' ? '‡§Ö‡§™‡§®‡§æ ‡§¨‡§ú‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ñ‡§∞‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®Ü‡®™‡®£‡®æ ‡®¨‡®ú‡®ü ‡®™‡©ç‡®∞‡®¨‡©∞‡®ß‡®ø‡®§ ‡®ï‡®∞‡©ã ‡®Ö‡®§‡©á ‡®ñ‡®∞‡®ö‡®ø‡®Ü‡®Ç ‡®®‡©Ç‡©∞ ‡®ü‡®∞‡©à‡®ï ‡®ï‡®∞‡©ã' : 'Manage your budget and track expenses',
      route: 'Budgeting',
      category: 'Financial Management'
    },
    {
      id: 2,
      title: currentLanguage === 'hindi' ? '‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§®' :
             currentLanguage === 'punjabi' ? '‡®ß‡©ã‡®ñ‡®æ‡®ß‡©ú‡©Ä ‡®∏‡®ø‡®Æ‡©Å‡®≤‡©á‡®∏‡®º‡®®' : 'Fraud Simulation',
      searchTerms: ['fraud', 'security', 'simulation', 'scam', 'protection', 'safety', 'cyber security', 'phishing', 'identity theft', 'online safety'],
      icon: 'üîê',
      color: '#FF6B6B',
      gradient: ['#FF6B6B', '#EE5A52'],
      description: currentLanguage === 'hindi' ? '‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®ß‡©ã‡®ñ‡®æ‡®ß‡©ú‡©Ä ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ü ‡®Ö‡®§‡©á ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ü ‡®¨‡®æ‡®∞‡©á ‡®ú‡®æ‡®£‡©ã' : 'Learn about fraud protection and security',
      route: 'FraudSimulation',
      category: 'Security'
    },
    {
      id: 3,
      title: currentLanguage === 'hindi' ? '‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§ü‡•ç‡§∞‡•à‡§ï‡§∞' :
             currentLanguage === 'punjabi' ? '‡®ü‡©Ä‡®ö‡®æ ‡®ü‡®∞‡©à‡®ï‡®∞' : 'Goal Tracker',
      searchTerms: ['goal', 'tracker', 'target', 'achievement', 'progress', 'planning', 'objectives', 'milestones', 'personal goals'],
      icon: '‚è∞',
      color: '#4ECDC4',
      gradient: ['#4ECDC4', '#44A08D'],
      description: currentLanguage === 'hindi' ? '‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®Ü‡®™‡®£‡©á ‡®µ‡®ø‡©±‡®§‡©Ä ‡®Ö‡®§‡©á ‡®®‡®ø‡©±‡®ú‡©Ä ‡®ü‡©Ä‡®ö‡®ø‡®Ü‡®Ç ‡®®‡©Ç‡©∞ ‡®ü‡®∞‡©à‡®ï ‡®ï‡®∞‡©ã' : 'Track your financial and personal goals',
      route: 'GoalTracker',
      category: 'Planning'
    },
    {
      id: 4,
      title: currentLanguage === 'hindi' ? '‡§ñ‡•á‡§≤' :
             currentLanguage === 'punjabi' ? '‡®ñ‡©á‡®°‡®æ‡®Ç' : 'Games',
      searchTerms: ['games', 'play', 'fun', 'entertainment', 'learning games', 'educational games', 'quiz', 'interactive'],
      icon: 'üéÆ',
      color: '#7B68EE',
      gradient: ['#7B68EE', '#6A5ACD'],
      description: currentLanguage === 'hindi' ? '‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§ñ‡•á‡§≤ ‡§î‡§∞ ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®µ‡®ø‡®¶‡®ø‡®Ö‡®ï ‡®µ‡®ø‡©±‡®§‡©Ä ‡®ñ‡©á‡®°‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®ó‡®§‡©Ä‡®µ‡®ø‡®ß‡©Ä‡®Ü‡®Ç' : 'Educational financial games and activities',
      route: 'GamesSplash',
      category: 'Entertainment'
    },
    {
      id: 5,
      title: currentLanguage === 'hindi' ? '‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞' :
             currentLanguage === 'punjabi' ? '‡®µ‡®ø‡©±‡®§‡©Ä ‡®ï‡©à‡®≤‡®ï‡©Å‡®≤‡©á‡®ü‡®∞' : 'Financial Calculators',
      searchTerms: ['calculator', 'calculation', 'finance', 'math', 'compute', 'calculate', 'interest', 'loan', 'mortgage', 'investment calculator'],
      icon: 'üßÆ',
      color: '#45B7D1',
      gradient: ['#45B7D1', '#3A9BC1'],
      description: currentLanguage === 'hindi' ? '‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§ó‡§£‡§®‡§æ ‡§â‡§™‡§ï‡§∞‡§£ ‡§î‡§∞ ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞' :
                   currentLanguage === 'punjabi' ? '‡®µ‡®ø‡©±‡®§‡©Ä ‡®ó‡®£‡®®‡®æ ‡®ü‡©Ç‡®≤ ‡®Ö‡®§‡©á ‡®ï‡©à‡®≤‡®ï‡©Å‡®≤‡©á‡®ü‡®∞' : 'Financial calculation tools and calculators',
      route: 'FinancialCalculator',
      category: 'Tools'
    },
    {
      id: 6,
      title: currentLanguage === 'hindi' ? '‡§â‡§™‡§π‡§æ‡§∞' :
             currentLanguage === 'punjabi' ? '‡®§‡©ã‡®π‡®´‡®º‡©á' : 'Gifts',
      searchTerms: ['gifts', 'rewards', 'present', 'bonus', 'earn', 'redeem', 'points', 'cashback', 'incentives'],
      icon: 'üéÅ',
      color: '#F39C12',
      gradient: ['#F39C12', '#E67E22'],
      description: currentLanguage === 'hindi' ? '‡§Ö‡§™‡§®‡•Ä ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§â‡§™‡§π‡§æ‡§∞ ‡§î‡§∞ ‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®Ü‡®™‡®£‡©Ä‡®Ü‡®Ç ‡®ó‡®§‡©Ä‡®µ‡®ø‡®ß‡©Ä‡®Ü‡®Ç ‡®§‡©ã‡®Ç ‡®§‡©ã‡®π‡®´‡®º‡©á ‡®Ö‡®§‡©á ‡®á‡®®‡®æ‡®Æ ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡©ã' : 'Redeem gifts and rewards from your activities',
      route: 'Gifts',
      category: 'Rewards'
    },
    {
      id: 7,
      title: currentLanguage === 'hindi' ? '‡§®‡§ø‡§µ‡•á‡§∂ ‡§ï‡•Ä ‡§Æ‡•Ç‡§≤ ‡§¨‡§æ‡§§‡•á‡§Ç' :
             currentLanguage === 'punjabi' ? '‡®®‡®ø‡®µ‡©á‡®∏‡®º ‡®¶‡©Ä‡®Ü‡®Ç ‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®ó‡©±‡®≤‡®æ‡®Ç' : 'Investment Basics',
      searchTerms: ['investment', 'invest', 'stocks', 'basics', 'learning', 'finance', 'portfolio', 'trading', 'mutual funds', 'shares'],
      icon: 'üìà',
      color: '#27AE60',
      gradient: ['#27AE60', '#229954'],
      description: currentLanguage === 'hindi' ? '‡§®‡§ø‡§µ‡•á‡§∂ ‡§ï‡•á ‡§Æ‡•Ç‡§≤ ‡§∏‡§ø‡§¶‡•ç‡§ß‡§æ‡§Ç‡§§‡•ã‡§Ç ‡§î‡§∞ ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Ä‡§ñ‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®®‡®ø‡®µ‡©á‡®∏‡®º ‡®¶‡©á ‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®∏‡®ø‡®ß‡®æ‡®Ç‡®§‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®∞‡®£‡®®‡©Ä‡®§‡©Ä‡®Ü‡®Ç ‡®®‡©Ç‡©∞ ‡®∏‡®ø‡©±‡®ñ‡©ã' : 'Learn investment fundamentals and strategies',
      route: 'InvestmentBasics',
      category: 'Learning'
    },
    {
      id: 8,
      title: currentLanguage === 'hindi' ? '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ' :
             currentLanguage === 'punjabi' ? '‡®ê‡®Æ‡®∞‡®ú‡©à‡®Ç‡®∏‡©Ä ‡®Æ‡®¶‡®¶' : 'Emergency Help',
      searchTerms: ['emergency', 'help', 'support', 'assistance', 'urgent', 'crisis', 'financial emergency', 'quick help'],
      icon: 'üö®',
      color: '#E74C3C',
      gradient: ['#E74C3C', '#C0392B'],
      description: currentLanguage === 'hindi' ? '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®ê‡®Æ‡®∞‡®ú‡©à‡®Ç‡®∏‡©Ä ‡®µ‡®ø‡©±‡®§‡©Ä ‡®Æ‡®¶‡®¶ ‡®Ö‡®§‡©á ‡®∏‡®π‡®æ‡®á‡®§‡®æ ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡©ã' : 'Get emergency financial help and support',
      route: 'EmergencyHelp',
      category: 'Support'
    },
  ];

  // Learning card data with enhanced search terms
  const learningCards = [
    { 
      id: '1', 
      title: currentLanguage === 'hindi' ? '‡§µ‡§ø‡§§‡•ç‡§§ ‡§ï‡•Ä ‡§Æ‡•Ç‡§≤ ‡§¨‡§æ‡§§‡•á‡§Ç' : 
             currentLanguage === 'punjabi' ? '‡®µ‡®ø‡©±‡®§ ‡®¶‡©Ä‡®Ü‡®Ç ‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®ó‡©±‡®≤‡®æ‡®Ç' : 'Finance Basics', 
      icon: 'üíµ', 
      color: '#4A90E2', 
      route: 'FinanceTutorial',
      searchTerms: ['finance', 'basics', 'money', 'financial literacy', 'tutorial', 'learning'],
      description: currentLanguage === 'hindi' ? '‡§Æ‡•å‡§≤‡§ø‡§ï ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡•Ä‡§ñ‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®µ‡®ø‡©±‡®§‡©Ä ‡®ß‡®æ‡®∞‡®®‡®æ‡®µ‡®æ‡®Ç ‡®∏‡®ø‡©±‡®ñ‡©ã' : 'Learn fundamental financial concepts'
    },
    { 
      id: '2', 
      title: currentLanguage === 'hindi' ? '‡§è‡§∏‡§Ü‡§à‡§™‡•Ä ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó' :
             currentLanguage === 'punjabi' ? '‡®ê‡®∏‡®Ü‡®à‡®™‡©Ä ‡®∏‡®ø‡©±‡®ñ‡®£‡®æ' : 'SIP Learning', 
      icon: 'üìä', 
      color: '#27AE60', 
      route: 'SIPTutorial',
      searchTerms: ['sip', 'systematic investment plan', 'recurring investment', 'monthly investment'],
      description: currentLanguage === 'hindi' ? '‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ‡•à‡§ü‡§ø‡§ï ‡§á‡§®‡•ç‡§µ‡•á‡§∏‡•ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§™‡•ç‡§≤‡§æ‡§® ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®∏‡®ø‡®∏‡®ü‡®Æ‡©à‡®ü‡®ø‡®ï ‡®á‡®®‡®µ‡©à‡®∏‡®ü‡®Æ‡©à‡®Ç‡®ü ‡®™‡®≤‡®æ‡®® ‡®®‡©Ç‡©∞ ‡®∏‡®Æ‡®ù‡©ã' : 'Understand Systematic Investment Plans'
    },
    { 
      id: '3', 
      title: currentLanguage === 'hindi' ? '‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§°' :
             currentLanguage === 'punjabi' ? '‡®Æ‡®ø‡®ä‡®ö‡©Å‡®Ö‡®≤ ‡®´‡©∞‡®°' : 'Mutual Funds', 
      icon: 'üìà', 
      color: '#F39C12', 
      route: 'MutualFundsTutorial',
      searchTerms: ['mutual funds', 'investment', 'portfolio', 'fund management'],
      description: currentLanguage === 'hindi' ? '‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§° ‡§®‡§ø‡§µ‡•á‡§∂ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®Æ‡®ø‡®ä‡®ö‡©Å‡®Ö‡®≤ ‡®´‡©∞‡®° ‡®®‡®ø‡®µ‡©á‡®∏‡®º‡®æ‡®Ç ‡®¨‡®æ‡®∞‡©á ‡®ú‡®æ‡®£‡©ã' : 'Learn about mutual fund investments'
    },
    { 
      id: '4', 
      title: currentLanguage === 'hindi' ? '‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï‡§§‡§æ' :
             currentLanguage === 'punjabi' ? '‡®ß‡©ã‡®ñ‡®æ‡®ß‡©ú‡©Ä ‡®ú‡®æ‡®ó‡®∞‡©Ç‡®ï‡®§‡®æ' : 'Fraud Awareness', 
      icon: 'üïµÔ∏è‚Äç‚ôÇÔ∏è', 
      color: '#E74C3C', 
      route: 'FraudTutorial',
      searchTerms: ['fraud', 'awareness', 'scam', 'security', 'protection'],
      description: currentLanguage === 'hindi' ? '‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä ‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§π‡•á‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®µ‡®ø‡©±‡®§‡©Ä ‡®ß‡©ã‡®ñ‡®æ‡®ß‡©ú‡©Ä ‡®§‡©ã‡®Ç ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ö‡®§ ‡®∞‡®π‡©ã' : 'Stay protected from financial frauds'
    },
    { 
      id: '5', 
      title: currentLanguage === 'hindi' ? '‡§ï‡§∞ ‡§®‡§ø‡§Ø‡•ã‡§ú‡§®' :
             currentLanguage === 'punjabi' ? '‡®ü‡©à‡®ï‡®∏ ‡®Ø‡©ã‡®ú‡®®‡®æ‡®¨‡©∞‡®¶‡©Ä' : 'Tax Planning', 
      icon: 'üßæ', 
      color: '#9B59B6', 
      route: 'TaxTutorial',
      searchTerms: ['tax', 'planning', 'income tax', 'tax saving', 'deductions'],
      description: currentLanguage === 'hindi' ? '‡§Ö‡§™‡§®‡•á ‡§ï‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§ï‡•Å‡§∂‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç' :
                   currentLanguage === 'punjabi' ? '‡®Ü‡®™‡®£‡©á ‡®ü‡©à‡®ï‡®∏‡®æ‡®Ç ‡®¶‡©Ä ‡®ï‡©Å‡®∏‡®º‡®≤‡®§‡®æ ‡®®‡®æ‡®≤ ‡®Ø‡©ã‡®ú‡®®‡®æ ‡®¨‡®£‡®æ‡®ì' : 'Plan your taxes efficiently'
    },
  ];

  // Combine all searchable content
  const allSearchableContent = [
    ...allFeatures.map(feature => ({
      ...feature,
      type: 'feature'
    })),
    ...learningCards.map(card => ({
      ...card,
      type: 'learning',
      searchTerms: card.searchTerms || [],
      category: 'Learning'
    }))
  ];

  const mainFeatures = allFeatures.filter(feature => [1, 4].includes(feature.id));
  const additionalFeatures = allFeatures.filter(feature => ![1, 4].includes(feature.id));

  // Enhanced search functionality
  const handleSearch = (query) => {
    setSearchQuery(query);
    
    if (query.trim() === '') {
      setSearchResults([]);
      setIsSearching(false);
      setShowSearchResults(false);
      return;
    }

    setIsSearching(true);
    setShowSearchResults(true);
    
    const lowercaseQuery = query.toLowerCase();
    
    // Search through all content with fuzzy matching
    const results = allSearchableContent.filter(item => {
      const titleMatch = item.title.toLowerCase().includes(lowercaseQuery);
      const descriptionMatch = item.description && item.description.toLowerCase().includes(lowercaseQuery);
      const categoryMatch = item.category && item.category.toLowerCase().includes(lowercaseQuery);
      
      // Search through search terms
      const searchTermsMatch = item.searchTerms && item.searchTerms.some(term => 
        term.toLowerCase().includes(lowercaseQuery) || 
        lowercaseQuery.includes(term.toLowerCase())
      );
      
      // Fuzzy search - check if query words are contained in title or search terms
      const queryWords = lowercaseQuery.split(' ').filter(word => word.length > 2);
      const fuzzyMatch = queryWords.some(word => 
        item.title.toLowerCase().includes(word) ||
        (item.searchTerms && item.searchTerms.some(term => term.toLowerCase().includes(word)))
      );
      
      return titleMatch || descriptionMatch || categoryMatch || searchTermsMatch || fuzzyMatch;
    });
    
    // Sort results by relevance
    const sortedResults = results.sort((a, b) => {
      const aTitle = a.title.toLowerCase();
      const bTitle = b.title.toLowerCase();
      
      // Exact title match gets highest priority
      if (aTitle.includes(lowercaseQuery) && !bTitle.includes(lowercaseQuery)) return -1;
      if (!aTitle.includes(lowercaseQuery) && bTitle.includes(lowercaseQuery)) return 1;
      
      // Then sort by title length (shorter titles are more relevant)
      return aTitle.length - bTitle.length;
    });
    
    setSearchResults(sortedResults);
  };

  const handleFeaturePress = (feature) => {
    // Clear search when navigating
    setSearchQuery('');
    setSearchResults([]);
    setIsSearching(false);
    setShowSearchResults(false);
    
    if (feature.route) {
      navigation.navigate(feature.route);
    }
  };

  const clearSearch = () => {
    setSearchQuery('');
    setSearchResults([]);
    setIsSearching(false);
    setShowSearchResults(false);
  };

  const renderFeatureCard = (feature, index = 0) => (
    <Pressable
      key={feature.id}
      style={[styles.featureCard, { 
        transform: [{ scale: 1 }] 
      }]}
      onPress={() => handleFeaturePress(feature)}
      android_ripple={{ color: 'rgba(255, 255, 255, 0.3)', borderless: true }}
    >
      <Animated.View 
        style={[
          styles.featureIconContainer, 
          { 
            backgroundColor: feature.color,
            shadowColor: feature.color,
            shadowOffset: {
              width: 0,
              height: 4,
            },
            shadowOpacity: 0.3,
            shadowRadius: 8,
            elevation: 8,
          }
        ]}
      >
        <Text style={styles.featureIcon}>{feature.icon}</Text>
      </Animated.View>
      <Text style={styles.featureTitle}>{feature.title}</Text>
    </Pressable>
  );

  const renderSearchResult = ({ item, index }) => (
    <Pressable
      key={`${item.type}-${item.id}-${index}`}
      style={styles.searchResultItem}
      onPress={() => handleFeaturePress(item)}
      android_ripple={{ color: 'rgba(0, 0, 0, 0.1)' }}
    >
      <View style={[styles.searchResultIcon, { backgroundColor: item.color }]}>
        <Text style={styles.searchResultIconText}>{item.icon}</Text>
      </View>
      <View style={styles.searchResultContent}>
        <Text style={styles.searchResultTitle}>{item.title}</Text>
        <Text style={styles.searchResultDescription}>{item.description}</Text>
        {item.category && (
          <Text style={styles.searchResultCategory}>{item.category}</Text>
        )}
      </View>
      <Text style={styles.searchResultArrow}>‚Üí</Text>
    </Pressable>
  );

  const renderViewMoreButton = () => (
    <Pressable
      style={styles.viewMoreCard}
      onPress={() => setShowAllFeatures(!showAllFeatures)}
      android_ripple={{ color: 'rgba(255, 255, 255, 0.3)', borderless: true }}
    >
      <Animated.View style={[
        styles.featureIconContainer, 
        { 
          backgroundColor: showAllFeatures ? '#E67E22' : '#3498DB',
          shadowColor: showAllFeatures ? '#E67E22' : '#3498DB',
          shadowOffset: {
            width: 0,
            height: 4,
          },
          shadowOpacity: 0.3,
          shadowRadius: 8,
          elevation: 8,
          transform: [{ 
            rotate: expandAnim.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '180deg']
            }) 
          }]
        }
      ]}>
        <Text style={styles.featureIcon}>
          {showAllFeatures ? '‚Üë' : '‚Üì'}
        </Text>
      </Animated.View>
      <Text style={styles.featureTitle}>
        {showAllFeatures ? 
          (currentLanguage === 'hindi' ? '‡§ï‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç' :
           currentLanguage === 'punjabi' ? '‡®ò‡©±‡®ü ‡®µ‡©á‡®ñ‡©ã' : 'View Less') : 
          (currentLanguage === 'hindi' ? '‡§î‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç' :
           currentLanguage === 'punjabi' ? '‡®π‡©ã‡®∞ ‡®µ‡©á‡®ñ‡©ã' : 'View More')}
      </Text>
    </Pressable>
  );

  const renderViewLessButton = () => (
    <Pressable
      style={styles.viewLessButton}
      onPress={() => setShowAllFeatures(false)}
      android_ripple={{ color: 'rgba(255, 255, 255, 0.3)', borderless: true }}
    >
      <View style={styles.viewLessContent}>
        <Text style={styles.viewLessText}>
          {currentLanguage === 'hindi' ? '‡§ï‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç' :
           currentLanguage === 'punjabi' ? '‡®ò‡©±‡®ü ‡®µ‡©á‡®ñ‡©ã' : 'View Less'}
        </Text>
        <Text style={styles.viewLessIcon}>‚Üë</Text>
      </View>
    </Pressable>
  );

  return (
    <SafeAreaView style={styles.container}>
      {/* Enhanced Top Section */}
      <View style={styles.topSection}>
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.greetingContainer}>
            <Text style={styles.greeting}>
              Hi, {fullName ? fullName : 'Guest'}
            </Text>
            <Text style={styles.subGreeting}>{getTimeGreeting()}</Text>
          </View>
          <Pressable style={styles.notificationButton}>
            <Text style={styles.notificationIcon}>üîî</Text>
          </Pressable>
        </View>

        {/* Enhanced Stats Section */}
        <View style={styles.statsContainer}>
          <View style={styles.statItem}>
            <Text style={styles.statIcon}>üíé</Text>
            <Text style={styles.statLabel}>Today's Earn</Text>
            <Text style={styles.statValue}>00000</Text>
          </View>
          <View style={styles.divider} />
          <View style={styles.statItem}>
            <Text style={styles.statIcon}>üèÜ</Text>
            <Text style={styles.statLabel}>Total Rewards</Text>
            <Text style={styles.statValue}>00000</Text>
          </View>
        </View>

        {/* Enhanced Search Bar */}
        <View style={styles.searchContainer}>
          <View style={styles.searchBar}>
            <Text style={styles.searchIcon}>üîç</Text>
            <TextInput
              style={styles.searchInput}
              placeholder={currentLanguage === 'hindi' ? "‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Å, ‡§ü‡•ç‡§Ø‡•Ç‡§ü‡•ã‡§∞‡§ø‡§Ø‡§≤, ‡§ñ‡•á‡§≤ ‡§ñ‡•ã‡§ú‡•á‡§Ç..." :
                         currentLanguage === 'punjabi' ? "‡®µ‡®ø‡®∏‡®º‡©á‡®∏‡®º‡®§‡®æ‡®µ‡®æ‡®Ç, ‡®ü‡®ø‡®ä‡®ü‡©ã‡®∞‡®ø‡®Ö‡®≤, ‡®ñ‡©á‡®°‡®æ‡®Ç ‡®ñ‡©ã‡®ú‡©ã..." :
                         "Search features, tutorials, games..."}
              placeholderTextColor={Color.colorGray}
              value={searchQuery}
              onChangeText={handleSearch}
              returnKeyType="search"
              autoCorrect={false}
            />
            {searchQuery.length > 0 && (
              <Pressable onPress={clearSearch} style={styles.clearButton}>
                <Text style={styles.clearButtonText}>‚úï</Text>
              </Pressable>
            )}
          </View>
        </View>
      </View>

      {/* Search Results Overlay */}
      {showSearchResults && (
        <View style={styles.searchOverlay}>
          <View style={styles.searchResultsContainer}>
            {searchResults.length > 0 ? (
              <>
                <Text style={styles.searchResultsHeader}>
                  {currentLanguage === 'hindi' ? 
                    `"${searchQuery}" ‡§ï‡•á ‡§≤‡§ø‡§è ${searchResults.length} ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡•á` :
                   currentLanguage === 'punjabi' ? 
                    `"${searchQuery}" ‡®≤‡®à ${searchResults.length} ‡®®‡®§‡©Ä‡®ú‡©á ‡®Æ‡®ø‡®≤‡©á` :
                    `Found ${searchResults.length} result${searchResults.length !== 1 ? 's' : ''} for "${searchQuery}"`}
                </Text>
                <FlatList
                  data={searchResults}
                  renderItem={renderSearchResult}
                  keyExtractor={(item, index) => `${item.type}-${item.id}-${index}`}
                  showsVerticalScrollIndicator={false}
                  contentContainerStyle={{ paddingBottom: 20 }}
                />
              </>
            ) : (
              <View style={styles.noResultsContainer}>
                <Text style={styles.noResultsIcon}>üîç</Text>
                <Text style={styles.noResultsText}>
                  {currentLanguage === 'hindi' ? 
                    `"${searchQuery}" ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ` :
                   currentLanguage === 'punjabi' ? 
                    `"${searchQuery}" ‡®≤‡®à ‡®ï‡©ã‡®à ‡®®‡®§‡©Ä‡®ú‡®æ ‡®®‡®π‡©Ä‡®Ç ‡®Æ‡®ø‡®≤‡®ø‡®Ü` :
                    `No results found for "${searchQuery}"`}
                </Text>
                <Text style={styles.noResultsSubtext}>
                  {currentLanguage === 'hindi' ? 
                    '‡§á‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç: "‡§¨‡§ú‡§ü", "‡§ñ‡•á‡§≤", "‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞", "‡§®‡§ø‡§µ‡•á‡§∂", "‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä", "‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø", "‡§∏‡•Ä‡§ñ‡§®‡§æ"' :
                   currentLanguage === 'punjabi' ? 
                    '‡®á‡®∏ ‡®≤‡®à ‡®ñ‡©ã‡®ú ‡®ï‡®∞‡©ã: "‡®¨‡®ú‡®ü", "‡®ñ‡©á‡®°‡®æ‡®Ç", "‡®ï‡©à‡®≤‡®ï‡©Å‡®≤‡©á‡®ü‡®∞", "‡®®‡®ø‡®µ‡©á‡®∏‡®º", "‡®ß‡©ã‡®ñ‡®æ‡®ß‡©ú‡©Ä", "‡®ü‡©Ä‡®ö‡©á", "‡®∏‡®ø‡©±‡®ñ‡®£‡®æ"' :
                    'Try searching for: "budget", "games", "calculator", "investment", "fraud", "goals", "learning"'}
                </Text>
              </View>
            )}
          </View>
        </View>
      )}

      {/* Scrollable Main Content Area - Hidden when searching */}
      {!showSearchResults && (
        <ScrollView 
          style={styles.mainContent}
          showsVerticalScrollIndicator={false}
          bounces={true}
          contentContainerStyle={{ paddingBottom: 100 }}
        >
          {/* Main Features Section */}
          <View style={styles.sectionContainer}>
            <Text style={styles.sectionTitle}>
              {currentLanguage === 'hindi' ? '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§™‡§π‡•Å‡§Ç‡§ö' :
               currentLanguage === 'punjabi' ? '‡®§‡©Å‡®∞‡©∞‡®§ ‡®™‡®π‡©Å‡©∞‡®ö' : 'Quick Access'}
            </Text>
            <View style={styles.featuresGrid}>
              {mainFeatures.map((feature, index) => renderFeatureCard(feature, index))}
              {renderViewMoreButton()}
            </View>
          </View>

          {/* Additional Features with Animation */}
          <Animated.View
            style={[
              styles.additionalFeaturesContainer,
              {
                maxHeight: expandAnim.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, 1000],
                }),
                opacity: expandAnim,
              },
            ]}
          >
            {showAllFeatures && (
              <>
                <View style={styles.sectionContainer}>
                  <Text style={styles.sectionTitle}>
                    {currentLanguage === 'hindi' ? '‡§∏‡§≠‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Å' :
                     currentLanguage === 'punjabi' ? '‡®∏‡®æ‡®∞‡©Ä‡®Ü‡®Ç ‡®µ‡®ø‡®∏‡®º‡©á‡®∏‡®º‡®§‡®æ‡®µ‡®æ‡®Ç' : 'All Features'}
                  </Text>
                  <View style={styles.additionalFeaturesGrid}>
                    {additionalFeatures.map((feature, index) => renderFeatureCard(feature, index))}
                  </View>
                  {renderViewLessButton()}
                </View>
              </>
            )}
          </Animated.View>

          {/* Tips of the Day */}
          <View style={styles.tipsSection}>
            <Pressable style={styles.tipsMiniCard} onPress={() => setShowTipModal(true)}>
              <Text style={styles.tipsMiniText}>
                {currentLanguage === 'hindi' ? '‡§Ü‡§ú ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏' :
                 currentLanguage === 'punjabi' ? '‡®Ö‡©±‡®ú ‡®¶‡©á ‡®∏‡©Å‡®ù‡®æ‡®Ö' : 'Tips of the Day'}
              </Text>
              <Animated.Text
                style={[
                  styles.blinkingIcon,
                  {
                    opacity: blinkingAnim,
                  },
                ]}
              >
                üí°
              </Animated.Text>
            </Pressable>
          </View>

          <TipModal visible={showTipModal} onClose={() => setShowTipModal(false)} userName={fullName} />

          {/* Learning Tutorials */}
          <View style={{ marginTop: 10 }}>
            <Text style={styles.sectionTitle}>
              {currentLanguage === 'hindi' ? '  ‡§∏‡•Ä‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§¢‡§º‡•á‡§Ç' :
               currentLanguage === 'punjabi' ? '  ‡®∏‡®ø‡©±‡®ñ‡©ã ‡®Ö‡®§‡©á ‡®µ‡®ß‡©ã' : '   Learn & Grow'}
            </Text>
            <FlatList
              data={learningCards}
              renderItem={({ item }) => (
                <Pressable
                  style={[styles.learningCard, { backgroundColor: item.color }]}
                  onPress={() => navigation.navigate(item.route)}
                >
                  <Text style={styles.learningIcon}>{item.icon}</Text>
                  <Text style={styles.learningTitle}>{item.title}</Text>
                </Pressable>
              )}
              keyExtractor={(item) => item.id}
              horizontal
              showsHorizontalScrollIndicator={false}
              snapToInterval={(width - 60) / 2 + 16}
              decelerationRate="fast"
              contentContainerStyle={{ paddingHorizontal: 20 }}
            />
          </View>

          {/* Card Switcher */}
          <View style={styles.cardSwitcherContainer}>
            <CardSwitcher />
          </View>
        </ScrollView>
      )}

      <ChatbotBubble />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Color.colorMediumseagreen,
  },
  topSection: {
    backgroundColor: Color.colorMediumseagreen,
    paddingHorizontal: 20,
    paddingTop: 10,
    paddingBottom: 20,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 10,
  },
  greetingContainer: {
    flex: 1,
  },
  greeting: {
    fontSize: 22,
    fontFamily: FontFamily.poppinsSemiBold,
    color: Color.colorGray200,
    marginBottom: 2,
  },
  subGreeting: {
    fontSize: 14,
    fontFamily: FontFamily.leagueSpartanRegular,
    color: Color.colorGray200,
    opacity: 0.9,
  },
  notificationButton: {
    width: 45,
    height: 45,
    borderRadius: 22.5,
    backgroundColor: Color.colorHoneydew,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
  },
  notificationIcon: {
    fontSize: 18,
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: Color.colorHoneydew,
    borderRadius: 20,
    padding: 10,
    marginBottom: 10,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 6,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  divider: {
    width: 2,
    backgroundColor: Color.colorWhite,
    marginHorizontal: 12,
    borderRadius: 1,
  },
  statIcon: {
    fontSize: 15,
    marginBottom: 6,
  },
  statLabel: {
    fontSize: 10,
    fontFamily: FontFamily.poppinsRegular,
    color: Color.colorDarkslategray,
    textAlign: 'center',
    marginBottom: 4,
  },
  statValue: {
    fontSize: 14,
    fontFamily: FontFamily.poppinsSemiBold,
    color: Color.colorDarkslategray,
    textAlign: 'center',
  },
  searchContainer: {
    alignItems: 'center',
    backgroundColor: Color.colorHoneydew,
    borderRadius: 20,
    width: '100%',
    paddingHorizontal: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 6,
  },
  searchBar: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Color.colorGhostwhite,
    borderRadius: 25,
    paddingHorizontal: 16,
    paddingVertical: 8,
    width: '90%',
  },
  searchIcon: {
    fontSize: 16,
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    fontSize: 15,
    fontFamily: FontFamily.robotoRegular,
    color: Color.colorGray100,
  },
  clearButton: {
    marginLeft: 8,
    padding: 4,
  },
  clearButtonText: {
    fontSize: 16,
    color: Color.colorGray,
  },
  searchOverlay: {
    flex: 1,
    backgroundColor: Color.colorHoneydew,
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
  },
  searchResultsContainer: {
    flex: 1,
    paddingTop: 20,
    paddingHorizontal: 20,
  },
  searchResultsHeader: {
    fontSize: 16,
    fontFamily: FontFamily.poppinsSemiBold,
    color: Color.colorDarkslategray,
    marginBottom: 16,
  },
  searchResultItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  searchResultIcon: {
    width: 50,
    height: 50,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 16,
  },
  searchResultIconText: {
    fontSize: 20,
  },
  searchResultContent: {
    flex: 1,
  },
  searchResultTitle: {
    fontSize: 16,
    fontFamily: FontFamily.poppinsSemiBold,
    color: Color.colorDarkslategray,
    marginBottom: 4,
  },
  searchResultDescription: {
    fontSize: 13,
    fontFamily: FontFamily.poppinsRegular,
    color: Color.colorGray,
    marginBottom: 2,
  },
  searchResultCategory: {
    fontSize: 11,
    fontFamily: FontFamily.poppinsRegular,
    color: Color.colorGray,
    fontStyle: 'italic',
  },
  searchResultArrow: {
    fontSize: 18,
    color: Color.colorGray,
  },
  noResultsContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 40,
  },
  noResultsIcon: {
    fontSize: 48,
    marginBottom: 16,
  },
  noResultsText: {
    fontSize: 18,
    fontFamily: FontFamily.poppinsSemiBold,
    color: Color.colorDarkslategray,
    marginBottom: 8,
    textAlign: 'center',
  },
  noResultsSubtext: {
    fontSize: 14,
    fontFamily: FontFamily.poppinsRegular,
    color: Color.colorGray,
    textAlign: 'center',
    lineHeight: 20,
  },
  mainContent: {
    flex: 1,
    backgroundColor: Color.colorHoneydew,
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
  },
  sectionContainer: {
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: FontFamily.poppinsSemiBold,
    color: Color.colorDarkslategray,
    marginBottom: 16,
  },
  featuresGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  additionalFeaturesContainer: {
    overflow: 'hidden',
  },
  additionalFeaturesGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  featureCard: {
    width: (width - 60) / 3,
    alignItems: 'center',
    marginBottom: 20,
    padding: 8,
    borderRadius: 16,
  },
  viewMoreCard: {
    width: (width - 60) / 3,
    alignItems: 'center',
    marginBottom: 20,
    padding: 8,
    borderRadius: 16,
  },
  featureIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 8,
  },
  featureIcon: {
    fontSize: 24,
  },
  featureTitle: {
    fontSize: 12,
    fontFamily: FontFamily.poppinsMedium,
    color: Color.colorDarkslategray,
    textAlign: 'center',
    lineHeight: 16,
  },
  viewLessButton: {
    alignSelf: 'center',
    backgroundColor: '#E67E22',
    borderRadius: 25,
    paddingHorizontal: 24,
    paddingVertical: 12,
    shadowColor: '#E67E22',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
    marginTop: 10,
    marginBottom: 20,
  },
  viewLessContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  viewLessText: {
    fontSize: 14,
    fontFamily: FontFamily.poppinsSemiBold,
    color: 'white',
    marginRight: 8,
  },
  viewLessIcon: {
    fontSize: 16,
    color: 'white',
  },
  tipsSection: {
    paddingHorizontal: 20,
    marginTop: 10,
  },
  tipsMiniCard: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'flex-start',
    marginBottom: 10,
    backgroundColor: '#e6f7ff',
    paddingHorizontal: 14,
    paddingVertical: 6,
    borderRadius: 16,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    marginLeft: 5,
  },
  tipsMiniText: {
    fontSize: 13,
    fontFamily: FontFamily.poppinsMedium,
    color: '#003366',
    marginRight: 8,
  },
  blinkingIcon: {
    fontSize: 18,
  },
  cardSwitcherContainer: {
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  // Learning tutorial styles
  learningCard: {
    width: (width - 60) / 2,
    height: 140,
    borderRadius: 16,
    marginRight: 16,
    padding: 16,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 4,
  },
  learningIcon: {
    fontSize: 32,
    marginBottom: 10,
  },
  learningTitle: {
    fontSize: 14,
    fontFamily: FontFamily.poppinsSemiBold,
    color: 'white',
    textAlign: 'center',
  },
});

export default Home;